import { Request, Response } from 'express';
import bcrypt from 'bcryptjs';
import { generateToken } from '../config/jwtUtils';
import { AuthenticatedRequest } from '../middleware/authMiddleware';

const dummyUsers: {
  firstName: string;
  lastName: string;
  email: string;
  phone: string;
  passwordHash: string;
  isAdmin: boolean;
}[] = [];

// ‚úÖ –†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è –∑–≤–∏—á–∞–π–Ω–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ (–Ω—ñ–∫–æ–ª–∏ –Ω–µ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä)
export const createUser = (req: Request, res: Response): void => {
  const {
    firstName,
    lastName,
    email,
    phone,
    password,
    confirmPassword,
  } = req.body;

  if (!firstName || !lastName || !email || !phone || !password || !confirmPassword) {
    res.status(400).json({ message: '–í—Å—ñ –ø–æ–ª—è –æ–±–æ–≤ º—è–∑–∫–æ–≤—ñ' });
    return;
  }

  if (password !== confirmPassword) {
    res.status(400).json({ message: '–ü–∞—Ä–æ–ª—ñ –Ω–µ –∑–±—ñ–≥–∞—é—Ç—å—Å—è' });
    return;
  }

  const userExists =
    email === 'admin@ex.com' || dummyUsers.find((u) => u.email === email);

  if (userExists) {
    res.status(409).json({ message: '–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –∑ —Ç–∞–∫–∏–º email –≤–∂–µ —ñ—Å–Ω—É—î' });
    return;
  }

  const passwordHash = bcrypt.hashSync(password, 10);

  const newUser = {
    firstName,
    lastName,
    email,
    phone,
    passwordHash,
    isAdmin: false, // –∑–≤–∏—á–∞–π–Ω–∏–π –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á
  };

  dummyUsers.push(newUser);

  console.log('üÜï –°—Ç–≤–æ—Ä–µ–Ω–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞:', newUser);

  res.status(201).json({ message: '–†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è —É—Å–ø—ñ—à–Ω–∞' });
};

// üîê –õ–æ–≥—ñ–Ω (–æ—Å–æ–±–ª–∏–≤–∞ –æ–±—Ä–æ–±–∫–∞ –¥–ª—è admin@ex.com)
export const loginUser = (req: Request, res: Response): void => {
  const { email, password } = req.body;

  // üéØ –°–ø–µ—Ü—ñ–∞–ª—å–Ω–∏–π –≤–∏–ø–∞–¥–æ–∫ ‚Äî –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä
  if (email === 'admin@ex.com') {
    const adminPassword = '11111';
    const isPasswordCorrect = password === adminPassword;

    if (!isPasswordCorrect) {
      res.status(401).json({ message: '–ù–µ–≤—ñ—Ä–Ω–∏–π –ø–∞—Ä–æ–ª—å' });
      return;
    }

    const token = generateToken({ email, isAdmin: true });

    res.status(200).json({
      message: 'Login successful',
      token,
      user: {
        email,
        firstName: 'Admin',
        isAdmin: true,
      },
    });
    return;
  }

  // üîç –î–ª—è –≤—Å—ñ—Ö —ñ–Ω—à–∏—Ö ‚Äî dummyUsers
  const user = dummyUsers.find((u) => u.email === email);

  if (!user) {
    res.status(401).json({ message: '–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ' });
    return;
  }

  const passwordMatch = bcrypt.compareSync(password, user.passwordHash);

  if (!passwordMatch) {
    res.status(401).json({ message: '–ù–µ–≤—ñ—Ä–Ω–∏–π –ø–∞—Ä–æ–ª—å' });
    return;
  }

  const token = generateToken({
    email: user.email,
    isAdmin: user.isAdmin,
  });

  res.status(200).json({
    message: 'Login successful',
    token,
    user: {
      email: user.email,
      firstName: user.firstName,
      isAdmin: user.isAdmin,
    },
  });
};

// üîí –ü—Ä–∏–≤–∞—Ç–Ω–∏–π –ø—Ä–æ—Ñ—ñ–ª—å
export const getProfile = (req: AuthenticatedRequest, res: Response) => {
  res.send({ user: req.user });
};

// üîÑ –û–Ω–æ–≤–ª–µ–Ω–Ω—è –ø—Ä–æ—Ñ—ñ–ª—é (—ñ–º—ñ—Ç–∞—Ü—ñ—è)
export const updateProfile = (req: AuthenticatedRequest, res: Response): void => {
  res.send(`–ü—Ä–æ—Ñ—ñ–ª—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ ${req.user.email} –æ–Ω–æ–≤–ª–µ–Ω–æ`);
};
